// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/morikuni/chat/eventsourcing (interfaces: EventStore)

package mockeventsourcing

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	eventsourcing "github.com/morikuni/chat/eventsourcing"
)

// Mock of EventStore interface
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *_MockEventStoreRecorder
}

// Recorder for MockEventStore (not exported)
type _MockEventStoreRecorder struct {
	mock *MockEventStore
}

func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &_MockEventStoreRecorder{mock}
	return mock
}

func (_m *MockEventStore) EXPECT() *_MockEventStoreRecorder {
	return _m.recorder
}

func (_m *MockEventStore) Find(_param0 context.Context, _param1 string) ([]eventsourcing.MetaEvent, error) {
	ret := _m.ctrl.Call(_m, "Find", _param0, _param1)
	ret0, _ := ret[0].([]eventsourcing.MetaEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEventStoreRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Find", arg0, arg1)
}

func (_m *MockEventStore) Save(_param0 context.Context, _param1 []eventsourcing.MetaEvent) error {
	ret := _m.ctrl.Call(_m, "Save", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEventStoreRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save", arg0, arg1)
}
